# A workflow service to setup and publish my plugin.
name: Plugin Publisher
on:
  push:
    tags:
      - '*'
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
  # Custom webhook event provided to trigger action execution by network request.
  repository_dispatch:
    types: [publish]
jobs:
  publish:
    name: Publication Job
    runs-on: ubuntu-latest
    if: github.repository == 'Moosphan/component-publisher'
    env:
      GPG_SECRET_KEY_RING_FILE: ${{ github.workspace }}/secring.gpg
    steps:
      # Checkout to source code repo.
      - name: Checkout
        uses: actions/checkout@v2
      # Set up java env with specific version and distribution.
      - name: Set up JDK-8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      # Prepare signing for publication.
      - name: Set up signing
        run: |
          echo "Generate GPG private key file in $GPG_SECRET_KEY_RING_FILE"
          echo $GPG_SECRET _KEY_RING_FILE_ CONTENT | base64 --decode > $GPG_SECRET_KEY_RING_FILE
          echo "GPG private key created succeed."
      # Publish plugin into Portal.
      - name: Plugin publication
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
          echo "Start publish plugin on Maven Plugin Portal."
          echo "Load secret gpg file: ${{ env.GPG_SECRET_KEY_RING_FILE }}"
          echo "The release version is: ${GITHUB_REF_NAME}"
          ./gradlew clean publishPlugins -S --no-daemon


    
